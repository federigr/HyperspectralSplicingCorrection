%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Description: 
%           This script guides the user through the process of splicing a
%           pair of spectra or a pair of spectral images. Please notice
%           that the spectra are synthetic and generated by a simple
%           gaussian mixture.
%
% MATLAB REQUIREMENTS:
%           This script was written on version 2021b
%           Suggested toolbox: STATISTICS AND MACHINE LEARNING, CURVE FITTING
% 
% References: 
%           Please cite the following article if you ever use the
%           contents of this script:
%           "F.Grillini, J.B. Thomas,  & S.George. (2022). A novel
%           splicing correction for VNIR-SWIR imaging spectroscopy"
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%% Single Spectrum Splicing  %%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Generate a sample spectrum
wvl = (400:2500);
Npeaks = 8;
synthetic_spectrum = GenerateSample(wvl,Npeaks);
% Split between VNIR and SWIR
sp_vnir = synthetic_spectrum(1:600)'-randi(100)/1000;
wvl_vnir = wvl(1:600)';
sp_swir = synthetic_spectrum(550:end)'+randi(100)/1000;
wvl_swir = wvl(550:end)';
% Build fitting functions for window size and slope of the logistic function
[fit_window_vnir,fit_window_swir,fit_slope_vnir] = BuildFits(0.05,0.001,wvl_vnir,wvl_swir);
% Spliced spectrum
[sp_full,wvl_full] = SingleSpectrumSplice(sp_vnir,wvl_vnir,sp_swir,wvl_swir,...
    fit_window_vnir,fit_window_swir,fit_slope_vnir,0.5);

figure;  
plot(wvl,synthetic_spectrum,'k--','lineWidth',0.5), hold on
plot(wvl_vnir,sp_vnir,'b','lineWidth',1.8), hold on
plot(wvl_swir,sp_swir,'r','lineWidth',1.8)
plot(wvl_full,sp_full,'c','lineWidth',1.8)
xlabel('\lambda [nm]'), ylabel('\rho(\lambda)')
legend('Original','VNIR','SWIR','spliced')



%% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%% Spectral Image Splicing  %%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Generate a synthetic hyperspectral image
sizeFactor = 6;    % size factor to apply to a 10x10 matrix
nbands = 400;
wvl = linspace(400,2500,nbands);
synthetic_hsi = MakeSmileyHyperspectral(sizeFactor,wvl);
% Split between VNIR and SWIR
hsi_vnir = synthetic_hsi(:,:,1:nbands/2)-randi(100,[size(synthetic_hsi,1),size(synthetic_hsi,2)])/1000;
wvl_vnir = wvl(1:nbands/2)';
overlapbands = 20;  % Define number of overlapping bands
hsi_swir = synthetic_hsi(:,:,nbands/2-overlapbands:end)+randi(100,[size(synthetic_hsi,1),size(synthetic_hsi,2)])/1000;
wvl_swir = wvl(nbands/2-overlapbands:end)';
% Spliced image
move_factor = 0.5;
[hsi_spliced,wvl_full] = HS_splice(hsi_vnir,wvl_vnir,hsi_swir,wvl_swir,move_factor);



%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%% Custom Functions  %%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function sp = GenerateSample(wvl,Npeaks)
    maxSigma = round((max(wvl)-min(wvl))/8);
    minSigma = round(maxSigma/3);
    sigmas = randi([minSigma maxSigma],[Npeaks,1]);
    mus = randi([min(wvl),max(wvl)],[Npeaks,1]);

    sp = sum(1./(sigmas.*sqrt(2*pi)).*exp(-(wvl-mus).^2./(2*sigmas.^2)),1);
    sp = ((sp - min(sp))/(max(sp)-min(sp)))*.75+.1;

end

function [fit_window_vnir,fit_window_swir,fit_slope_vnir] = BuildFits(Mdelta,mdelta,wvl_vnir,wvl_swir)
    
    wvl_ip_vnir_at_swir = interp1(wvl_vnir,wvl_vnir,wvl_swir);
    idx_out_swir = isnan(wvl_ip_vnir_at_swir);
    wvl_ip_swir_at_vnir = interp1(wvl_swir,wvl_swir,wvl_vnir);
    idx_out_vnir = isnan(wvl_ip_swir_at_vnir);

    % Window fitting distribution
    leftout_bands_vnir = numel(find(idx_out_vnir));
    leftout_bands_swir = numel(find(idx_out_swir));
    if mdelta == 0
        mdelta = Mdelta/leftout_bands_vnir;
    end
    window_delta_vnir = logspace(log10(mdelta),log10(Mdelta),leftout_bands_vnir);
    window_delta_swir = logspace(log10(mdelta),log10(Mdelta),leftout_bands_swir);
    fitfun_w = fittype( 'a1/(1+exp(-b1*(x-c1)))', 'independent', 'x', 'dependent', 'y' );
    opts_wv = fitoptions( 'Method', 'NonlinearLeastSquares');
    opts_ws = fitoptions( 'Method', 'NonlinearLeastSquares');
    opts_wv.Display = 'Off'; opts_ws.Display = 'Off';
    opts_wv.StartPoint = [leftout_bands_vnir leftout_bands_vnir/2 median(window_delta_vnir)];
    opts_ws.StartPoint = [leftout_bands_swir leftout_bands_swir/2 median(window_delta_swir)];
    opts_wv.Upper = [leftout_bands_vnir inf 1]; 
    opts_ws.Upper = [leftout_bands_swir inf 1];
    fit_window_vnir = fit(window_delta_vnir.',(1:leftout_bands_vnir).',fitfun_w,opts_wv);
    fit_window_swir = fit(window_delta_swir.',(1:leftout_bands_swir).',fitfun_w,opts_ws);

    fitfun_kv = fittype('a*exp(b*x)+c','independent','x','dependent','y');
    opts_kv =  fitoptions( 'Method', 'NonlinearLeastSquares');
    opts_kv.Display = 'Off'; 
    opts_kv.StartPoint = [0 0 0];
    opts_kv.Lower = [-inf -inf -inf];
    opts_kv.Upper = [inf inf 0.01]; 
    norm_vector = ((leftout_bands_vnir:-1:1) - 1)/(leftout_bands_vnir-1);
    fit_slope_vnir = fit(window_delta_vnir.',norm_vector.',fitfun_kv,opts_kv);
end

function synthetic_hsi = MakeSmileyHyperspectral(sizeFactor,wvl)
    mask = [0,0,0,0,0,0,0,0,0,0;
            0,0,2,2,0,0,2,2,0,0;
            0,0,2,2,0,0,2,2,0,0;
            0,0,0,0,0,0,0,0,0,0;
            0,1,0,0,0,0,0,0,1,0;
            0,1,0,0,0,0,0,0,1,0;
            0,0,1,0,0,0,0,1,0,0;
            0,0,0,1,0,0,1,0,0,0;
            0,0,0,0,1,1,0,0,0,0;
            0,0,0,0,0,0,0,0,0,0];
    mask = round(imresize(mask,sizeFactor))+1;
    nbands = numel(wvl);
    n_values = numel(unique(mask));
    mask = repmat(mask,[1,1,nbands]);
    synthetic_hsi = zeros(size(mask));
    Npeaks = 8;

    for i = 1:n_values
        idx = mask == i;
        synthetic_hsi(mask==i) = repmat(GenerateSample(wvl,Npeaks),[numel(find(idx))/nbands,1]);
    end

end